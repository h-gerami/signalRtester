{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { HttpTransportType, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nexport function useWebSokets(props) {\n  _s();\n\n  const {\n    url,\n    token\n  } = props;\n  const [connection, setConnection] = useState();\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder().withUrl(url, {\n      accessTokenFactory: () => token,\n      skipNegotiation: true,\n      transport: HttpTransportType.WebSockets\n    }).configureLogging(LogLevel.Debug).withAutomaticReconnect().build();\n    setConnection(newConnection);\n  }, []);\n  return connection;\n}\n\n_s(useWebSokets, \"RzaxFfAa8CIIQImcjU0Wa3tl4zU=\");","map":{"version":3,"sources":["/Users/hossein/Desktop/React Projects/signalRtester/src/hooks/useWebSokets.tsx"],"names":["useState","useEffect","HttpTransportType","HubConnectionBuilder","LogLevel","useWebSokets","props","url","token","connection","setConnection","newConnection","withUrl","accessTokenFactory","skipNegotiation","transport","WebSockets","configureLogging","Debug","withAutomaticReconnect","build"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAiD,OAAjD;AAEA,SACEC,iBADF,EAIEC,oBAJF,EAMEC,QANF,QAOO,oBAPP;AAQA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA8D;AAAA;;AACnE,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,KAAvB;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,EAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,aAAa,GAAG,IAAIR,oBAAJ,GACnBS,OADmB,CACXL,GADW,EACN;AACZM,MAAAA,kBAAkB,EAAE,MAAML,KADd;AAEZM,MAAAA,eAAe,EAAE,IAFL;AAGZC,MAAAA,SAAS,EAAEb,iBAAiB,CAACc;AAHjB,KADM,EAMnBC,gBANmB,CAMFb,QAAQ,CAACc,KANP,EAOnBC,sBAPmB,GAQnBC,KARmB,EAAtB;AASAV,IAAAA,aAAa,CAACC,aAAD,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAOF,UAAP;AACD;;GAjBeJ,Y","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { CUBY_WebSockets_confessHub } from '../components/Global/Global';\nimport {\n  HttpTransportType,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  HubConnection,\n  HubConnectionBuilder,\n  IHttpConnectionOptions,\n  LogLevel\n} from '@microsoft/signalr';\nexport function useWebSokets(props: { url: string; token?: string }) {\n  const { url, token } = props;\n  const [connection, setConnection] = useState<HubConnection>();\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder()\n      .withUrl(url, {\n        accessTokenFactory: () => token,\n        skipNegotiation: true,\n        transport: HttpTransportType.WebSockets\n      })\n      .configureLogging(LogLevel.Debug)\n      .withAutomaticReconnect()\n      .build();\n    setConnection(newConnection);\n  }, []);\n\n  return connection;\n}\n"]},"metadata":{},"sourceType":"module"}