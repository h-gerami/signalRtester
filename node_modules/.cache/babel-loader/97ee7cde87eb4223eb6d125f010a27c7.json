{"ast":null,"code":"var _jsxFileName = \"/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/ListeningSignalR.tsx\",\n    _s = $RefreshSig$();\n\nimport { TextField, Button } from '@mui/material';\nimport React, { useState } from 'react';\nimport ListeningResponse from './ListeningResponse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListeningSignalR = props => {\n  _s();\n\n  const {\n    connection,\n    onDoneAddListenMethod\n  } = props;\n  const [method, setMethod] = useState('');\n  const [isListening, setIsLestening] = useState(false);\n\n  const oncheckmethodClick = () => {\n    if (!method) return alert('set url first');\n    setIsLestening(false);\n    setTimeout(() => {\n      setIsLestening(true);\n      onDoneAddListenMethod(method);\n    }, 500);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listen-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"dense\",\n        fullWidth: true,\n        id: \"method\",\n        label: \"Listening Method\",\n        value: method,\n        placeholder: \"Listening Method ...\" // defaultValue=\"Connection Url ...\"\n        ,\n        onChange: t => {\n          setMethod(t.target.value);\n          setIsLestening(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginLeft: 10\n        },\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: oncheckmethodClick,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), isListening && /*#__PURE__*/_jsxDEV(ListeningResponse, {\n      connection: connection,\n      method: method\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListeningSignalR, \"CKm7y9OKPZps1argb0cYUFFMVNU=\");\n\n_c = ListeningSignalR;\nexport default ListeningSignalR;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListeningSignalR\");","map":{"version":3,"sources":["/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/ListeningSignalR.tsx"],"names":["TextField","Button","React","useState","ListeningResponse","ListeningSignalR","props","connection","onDoneAddListenMethod","method","setMethod","isListening","setIsLestening","oncheckmethodClick","alert","setTimeout","t","target","value","marginLeft"],"mappings":";;;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,eAAlC;AACA,OAAOC,KAAP,IAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;;AAKA,MAAMC,gBAAgB,GAAIC,KAAD,IAAiC;AAAA;;AACxD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwCF,KAA9C;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAU,KAAV,CAA9C;;AACA,QAAMU,kBAAkB,GAAG,MAAM;AAC/B,QAAI,CAACJ,MAAL,EAAa,OAAOK,KAAK,CAAC,eAAD,CAAZ;AACbF,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAG,IAAAA,UAAU,CAAC,MAAM;AACfH,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAJ,MAAAA,qBAAqB,CAACC,MAAD,CAArB;AACD,KAHS,EAGP,GAHO,CAAV;AAID,GAPD;;AASA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,MAAM,EAAC,OADT;AAEE,QAAA,SAAS,EAAE,IAFb;AAGE,QAAA,EAAE,EAAC,QAHL;AAIE,QAAA,KAAK,EAAC,kBAJR;AAKE,QAAA,KAAK,EAAEA,MALT;AAME,QAAA,WAAW,EAAC,sBANd,CAOE;AAPF;AAQE,QAAA,QAAQ,EAAGO,CAAD,IAAO;AACfN,UAAAA,SAAS,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACAN,UAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AAXH;AAAA;AAAA;AAAA;AAAA,cADF,eAcE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAEO,UAAAA,UAAU,EAAE;AAAd,SADT;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,OAAO,EAAEN,kBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAwBGF,WAAW,iBACV,QAAC,iBAAD;AAAmB,MAAA,UAAU,EAAEJ,UAA/B;AAA2C,MAAA,MAAM,EAAEE;AAAnD;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA3CD;;GAAMJ,gB;;KAAAA,gB;AA4CN,eAAeA,gBAAf","sourcesContent":["import { HubConnection } from '@microsoft/signalr';\nimport { TextField, Button } from '@mui/material';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport ListeningResponse from './ListeningResponse';\nexport interface ListeningSignalRType {\n  connection: HubConnection;\n  onDoneAddListenMethod?: (value: string) => void;\n}\nconst ListeningSignalR = (props: ListeningSignalRType) => {\n  const { connection, onDoneAddListenMethod } = props;\n  const [method, setMethod] = useState<string>('');\n  const [isListening, setIsLestening] = useState<boolean>(false);\n  const oncheckmethodClick = () => {\n    if (!method) return alert('set url first');\n    setIsLestening(false);\n    setTimeout(() => {\n      setIsLestening(true);\n      onDoneAddListenMethod(method);\n    }, 500);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"listen-wrapper\">\n        <TextField\n          margin=\"dense\"\n          fullWidth={true}\n          id=\"method\"\n          label=\"Listening Method\"\n          value={method}\n          placeholder=\"Listening Method ...\"\n          // defaultValue=\"Connection Url ...\"\n          onChange={(t) => {\n            setMethod(t.target.value);\n            setIsLestening(false);\n          }}\n        />\n        <Button\n          style={{ marginLeft: 10 }}\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={oncheckmethodClick}\n        >\n          Done\n        </Button>\n      </div>\n      {isListening && (\n        <ListeningResponse connection={connection} method={method} />\n      )}\n    </React.Fragment>\n  );\n};\nexport default ListeningSignalR;\n"]},"metadata":{},"sourceType":"module"}