{"ast":null,"code":"var _jsxFileName = \"/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/SendingSignalR.tsx\",\n    _s = $RefreshSig$();\n\nimport { TextField, Button } from '@mui/material';\nimport React, { useState } from 'react';\nimport webSocketsMethod from 'src/hooks/webSocketsMethod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendingSignalR = props => {\n  _s();\n\n  const {\n    connection\n  } = props;\n  const [method, setMethod] = useState('');\n  const [payload, setPayload] = useState('');\n  const [webSocketMethodRes, setWebSocketMethodRes] = useState('');\n\n  const oncheckmethodClick = () => {\n    setWebSocketMethodRes('');\n    let dd = JSON.parse(payload);\n    webSocketsMethod({\n      connection,\n      payload: dd,\n      method\n    }).then(res => {\n      setWebSocketMethodRes(`${JSON.stringify(res)}`);\n    }).catch(err => {\n      setWebSocketMethodRes(`${JSON.stringify(err)}`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      margin: \"dense\",\n      fullWidth: true,\n      id: \"method\",\n      label: \"Method\",\n      value: method,\n      placeholder: \"SignalR Method ...\" // defaultValue=\"Connection Url ...\"\n      ,\n      onChange: t => setMethod(t.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      margin: \"dense\",\n      multiline: true,\n      fullWidth: true,\n      rows: 4,\n      id: \"payload\",\n      label: \"payload\",\n      value: payload,\n      placeholder: \"SignalR Payload ...\" // defaultValue=\"Connection Url ...\"\n      ,\n      onChange: t => setPayload(t.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        marginTop: 10\n      },\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: oncheckmethodClick,\n      children: \"Check Method\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), webSocketMethodRes && /*#__PURE__*/_jsxDEV(TextField, {\n      margin: \"dense\",\n      multiline: true,\n      fullWidth: true,\n      rows: 4,\n      id: \"payload\" // label=\"payload\"\n      ,\n      contentEditable: false,\n      value: webSocketMethodRes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SendingSignalR, \"oPyHWO3sk/WgXX8cYZgB00ym6MU=\");\n\n_c = SendingSignalR;\nexport default SendingSignalR;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendingSignalR\");","map":{"version":3,"sources":["/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/SendingSignalR.tsx"],"names":["TextField","Button","React","useState","webSocketsMethod","SendingSignalR","props","connection","method","setMethod","payload","setPayload","webSocketMethodRes","setWebSocketMethodRes","oncheckmethodClick","dd","JSON","parse","then","res","stringify","catch","err","t","target","value","marginTop"],"mappings":";;;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,eAAlC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;;;AAIA,MAAMC,cAAc,GAAIC,KAAD,IAA+B;AAAA;;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAS,EAAT,CAA5D;;AAEA,QAAMW,kBAAkB,GAAG,MAAM;AAC/BD,IAAAA,qBAAqB,CAAC,EAAD,CAArB;AACA,QAAIE,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWP,OAAX,CAAT;AACAN,IAAAA,gBAAgB,CAAC;AAAEG,MAAAA,UAAF;AAAcG,MAAAA,OAAO,EAAEK,EAAvB;AAA2BP,MAAAA;AAA3B,KAAD,CAAhB,CACGU,IADH,CACSC,GAAD,IAAS;AACbN,MAAAA,qBAAqB,CAAE,GAAEG,IAAI,CAACI,SAAL,CAAeD,GAAf,CAAoB,EAAxB,CAArB;AACD,KAHH,EAIGE,KAJH,CAIUC,GAAD,IAAS;AACdT,MAAAA,qBAAqB,CAAE,GAAEG,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAoB,EAAxB,CAArB;AACD,KANH;AAOD,GAVD;;AAWA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,SAAD;AACE,MAAA,MAAM,EAAC,OADT;AAEE,MAAA,SAAS,EAAE,IAFb;AAGE,MAAA,EAAE,EAAC,QAHL;AAIE,MAAA,KAAK,EAAC,QAJR;AAKE,MAAA,KAAK,EAAEd,MALT;AAME,MAAA,WAAW,EAAC,oBANd,CAOE;AAPF;AAQE,MAAA,QAAQ,EAAGe,CAAD,IAAOd,SAAS,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV;AAR5B;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,SAAD;AACE,MAAA,MAAM,EAAC,OADT;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAE,IAHb;AAIE,MAAA,IAAI,EAAE,CAJR;AAKE,MAAA,EAAE,EAAC,SALL;AAME,MAAA,KAAK,EAAC,SANR;AAOE,MAAA,KAAK,EAAEf,OAPT;AAQE,MAAA,WAAW,EAAC,qBARd,CASE;AATF;AAUE,MAAA,QAAQ,EAAGa,CAAD,IAAOZ,UAAU,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV;AAV7B;AAAA;AAAA;AAAA;AAAA,YAZF,eAwBE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OADT;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAEZ,kBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF,EAgCGF,kBAAkB,iBACjB,QAAC,SAAD;AACE,MAAA,MAAM,EAAC,OADT;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAE,IAHb;AAIE,MAAA,IAAI,EAAE,CAJR;AAKE,MAAA,EAAE,EAAC,SALL,CAME;AANF;AAOE,MAAA,eAAe,EAAE,KAPnB;AAQE,MAAA,KAAK,EAAEA;AART;AAAA;AAAA;AAAA;AAAA,YAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD,CAhED;;GAAMP,c;;KAAAA,c;AAiEN,eAAeA,cAAf","sourcesContent":["import { HubConnection } from '@microsoft/signalr';\nimport { TextField, Button } from '@mui/material';\nimport React, { useState } from 'react';\nimport webSocketsMethod from 'src/hooks/webSocketsMethod';\nexport interface SendingSignalRType {\n  connection: HubConnection;\n}\nconst SendingSignalR = (props: SendingSignalRType) => {\n  const { connection } = props;\n  const [method, setMethod] = useState<string>('');\n  const [payload, setPayload] = useState<string>('');\n  const [webSocketMethodRes, setWebSocketMethodRes] = useState<string>('');\n\n  const oncheckmethodClick = () => {\n    setWebSocketMethodRes('');\n    let dd = JSON.parse(payload);\n    webSocketsMethod({ connection, payload: dd, method })\n      .then((res) => {\n        setWebSocketMethodRes(`${JSON.stringify(res)}`);\n      })\n      .catch((err) => {\n        setWebSocketMethodRes(`${JSON.stringify(err)}`);\n      });\n  };\n  return (\n    <React.Fragment>\n      <TextField\n        margin=\"dense\"\n        fullWidth={true}\n        id=\"method\"\n        label=\"Method\"\n        value={method}\n        placeholder=\"SignalR Method ...\"\n        // defaultValue=\"Connection Url ...\"\n        onChange={(t) => setMethod(t.target.value)}\n      />\n\n      <TextField\n        margin=\"dense\"\n        multiline\n        fullWidth={true}\n        rows={4}\n        id=\"payload\"\n        label=\"payload\"\n        value={payload}\n        placeholder=\"SignalR Payload ...\"\n        // defaultValue=\"Connection Url ...\"\n        onChange={(t) => setPayload(t.target.value)}\n      />\n      <Button\n        style={{ marginTop: 10 }}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={oncheckmethodClick}\n      >\n        Check Method\n      </Button>\n      {webSocketMethodRes && (\n        <TextField\n          margin=\"dense\"\n          multiline\n          fullWidth={true}\n          rows={4}\n          id=\"payload\"\n          // label=\"payload\"\n          contentEditable={false}\n          value={webSocketMethodRes}\n        />\n      )}\n    </React.Fragment>\n  );\n};\nexport default SendingSignalR;\n"]},"metadata":{},"sourceType":"module"}