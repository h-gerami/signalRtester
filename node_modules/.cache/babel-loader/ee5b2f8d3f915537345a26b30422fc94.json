{"ast":null,"code":"var _jsxFileName = \"/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/SendReceive.tsx\",\n    _s = $RefreshSig$();\n\nimport { Container, Grid } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport ListeningSignalR from './ListeningSignalR';\nimport SendingSignalR from './SendingSignalR';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendReceive = props => {\n  _s();\n\n  const {\n    connection\n  } = props;\n  const [isListening, setIsLestening] = useState(false);\n  const [listeningMethod, setListeningMethod] = useState('');\n  useEffect(() => {\n    if (listeningMethod) {\n      setIsLestening(true);\n    } else {\n      setIsLestening(false);\n    }\n  }, [listeningMethod]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"stretch\",\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(ListeningSignalR, {\n        onDoneAddListenMethod: t => setListeningMethod(t),\n        connection: connection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), isListening && /*#__PURE__*/_jsxDEV(SendingSignalR, {\n        connection: connection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SendReceive, \"BAjItv4c1k1eX89sSMvNd7Ryj+Q=\");\n\n_c = SendReceive;\nexport default SendReceive;\n{\n  /* <Grid item xs={6}>\n  <React.Fragment>\n  <TextField\n    margin=\"dense\"\n    fullWidth={true}\n    id=\"method\"\n    label=\"Method\"\n    value={method}\n    placeholder=\"SignalR Method ...\"\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setMethod(t.target.value)}\n  />\n   <TextField\n    margin=\"dense\"\n    multiline\n    fullWidth={true}\n    rows={4}\n    id=\"payload\"\n    label=\"payload\"\n    value={payload}\n    placeholder=\"SignalR Payload ...\"\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setPayload(t.target.value)}\n  />\n  <Button\n    style={{ marginTop: 10 }}\n    variant=\"outlined\"\n    color=\"primary\"\n    onClick={oncheckmethodClick}\n  >\n    Check Method\n  </Button>\n  {webSocketMethodRes && (\n    <TextField\n      margin=\"dense\"\n      multiline\n      fullWidth={true}\n      rows={4}\n      id=\"payload\"\n      // label=\"payload\"\n      contentEditable={false}\n      value={webSocketMethodRes}\n    />\n  )}\n  </React.Fragment>\n  </Grid>\n  <Grid item xs={6}>\n  <React.Fragment>\n  <TextField\n    margin=\"dense\"\n    fullWidth={true}\n    id=\"recMethod\"\n    label=\"recMethod\"\n    value={recMethod}\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setRecMethod(t.target.value)}\n  />\n  <Button\n    style={{ marginTop: 10 }}\n    variant=\"outlined\"\n    color=\"primary\"\n    onClick={oncheckRecivemethodClick}\n  >\n    Check Receive Method\n  </Button>\n  {/* {isListening && (\n    <TextField\n      margin=\"dense\"\n      multiline\n      fullWidth={true}\n      rows={4}\n      id=\"recMethodRes\"\n      contentEditable={false}\n      value={recMethodRes}\n    />\n  // )} */\n} // {recMethodRes}\n// </React.Fragment>\n// </Grid> */}\n\nvar _c;\n\n$RefreshReg$(_c, \"SendReceive\");","map":{"version":3,"sources":["/Users/hossein/Desktop/React Projects/signalRtester/src/content/applications/SignalRtester/SendReceive.tsx"],"names":["Container","Grid","React","useEffect","useState","ListeningSignalR","SendingSignalR","SendReceive","props","connection","isListening","setIsLestening","listeningMethod","setListeningMethod","t"],"mappings":";;;AACA,SAAiBA,SAAjB,EAA4BC,IAA5B,QAAmD,eAAnD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAIA,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AAAA;;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AACA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAU,KAAV,CAA9C;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAS,EAAT,CAAtD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,eAAJ,EAAqB;AACnBD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAFD,MAEO;AACLA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GANQ,EAMN,CAACC,eAAD,CANM,CAAT;AAOA,sBACE,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,cAAc,EAAC,QAHjB;AAIE,MAAA,UAAU,EAAC,SAJb;AAKE,MAAA,OAAO,EAAE,CALX;AAAA,8BAOE,QAAC,gBAAD;AACE,QAAA,qBAAqB,EAAGE,CAAD,IAAOD,kBAAkB,CAACC,CAAD,CADlD;AAEE,QAAA,UAAU,EAAEL;AAFd;AAAA;AAAA;AAAA;AAAA,cAPF,EAWGC,WAAW,iBAAI,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAED;AAA5B;AAAA;AAAA;AAAA;AAAA,cAXlB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA5BD;;GAAMF,W;;KAAAA,W;AA6BN,eAAeA,WAAf;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,C,CACD;AACA;AACA","sourcesContent":["import { HubConnection } from '@microsoft/signalr';\nimport { Button, Container, Grid, TextField } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport webSocketsMethod from 'src/hooks/webSocketsMethod';\nimport ListeningSignalR from './ListeningSignalR';\nimport SendingSignalR from './SendingSignalR';\nexport interface SendReceiveType {\n  connection: HubConnection;\n}\nconst SendReceive = (props: SendReceiveType) => {\n  const { connection } = props;\n  const [isListening, setIsLestening] = useState<boolean>(false);\n  const [listeningMethod, setListeningMethod] = useState<string>('');\n  useEffect(() => {\n    if (listeningMethod) {\n      setIsLestening(true);\n    } else {\n      setIsLestening(false);\n    }\n  }, [listeningMethod]);\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"stretch\"\n        spacing={3}\n      >\n        <ListeningSignalR\n          onDoneAddListenMethod={(t) => setListeningMethod(t)}\n          connection={connection}\n        />\n        {isListening && <SendingSignalR connection={connection} />}\n      </Grid>\n    </Container>\n  );\n};\nexport default SendReceive;\n{\n  /* <Grid item xs={6}>\n<React.Fragment>\n  <TextField\n    margin=\"dense\"\n    fullWidth={true}\n    id=\"method\"\n    label=\"Method\"\n    value={method}\n    placeholder=\"SignalR Method ...\"\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setMethod(t.target.value)}\n  />\n\n  <TextField\n    margin=\"dense\"\n    multiline\n    fullWidth={true}\n    rows={4}\n    id=\"payload\"\n    label=\"payload\"\n    value={payload}\n    placeholder=\"SignalR Payload ...\"\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setPayload(t.target.value)}\n  />\n  <Button\n    style={{ marginTop: 10 }}\n    variant=\"outlined\"\n    color=\"primary\"\n    onClick={oncheckmethodClick}\n  >\n    Check Method\n  </Button>\n  {webSocketMethodRes && (\n    <TextField\n      margin=\"dense\"\n      multiline\n      fullWidth={true}\n      rows={4}\n      id=\"payload\"\n      // label=\"payload\"\n      contentEditable={false}\n      value={webSocketMethodRes}\n    />\n  )}\n</React.Fragment>\n</Grid>\n<Grid item xs={6}>\n<React.Fragment>\n  <TextField\n    margin=\"dense\"\n    fullWidth={true}\n    id=\"recMethod\"\n    label=\"recMethod\"\n    value={recMethod}\n    // defaultValue=\"Connection Url ...\"\n    onChange={(t) => setRecMethod(t.target.value)}\n  />\n  <Button\n    style={{ marginTop: 10 }}\n    variant=\"outlined\"\n    color=\"primary\"\n    onClick={oncheckRecivemethodClick}\n  >\n    Check Receive Method\n  </Button>\n  {/* {isListening && (\n    <TextField\n      margin=\"dense\"\n      multiline\n      fullWidth={true}\n      rows={4}\n      id=\"recMethodRes\"\n      contentEditable={false}\n      value={recMethodRes}\n    />\n  // )} */\n}\n// {recMethodRes}\n// </React.Fragment>\n// </Grid> */}\n"]},"metadata":{},"sourceType":"module"}