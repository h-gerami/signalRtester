{"ast":null,"code":"/* eslint-disable handle-callback-err */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst webSocketsMethod = props => {\n  const {\n    payload,\n    connection,\n    method\n  } = props;\n  return new Promise((resolve, reject) => {\n    if ((connection === null || connection === void 0 ? void 0 : connection.state) === 'Disconnected') {\n      connection === null || connection === void 0 ? void 0 : connection.start().then(() => {\n        connection.invoke(method, payload).then(res => {\n          resolve(res);\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    } else {\n      connection === null || connection === void 0 ? void 0 : connection.invoke(method, payload).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      });\n    }\n  });\n};\n\nexport default webSocketsMethod;","map":{"version":3,"sources":["/Users/hossein/Desktop/React Projects/signalRtester/src/hooks/webSocketsMethod.tsx"],"names":["webSocketsMethod","props","payload","connection","method","Promise","resolve","reject","state","start","then","invoke","res","catch","err"],"mappings":"AAAA;;AACA;AAOA,MAAMA,gBAAgB,GAAIC,KAAD,IAAkD;AACzE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,MAAkCH,KAAxC;AAEA,SAAO,IAAII,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,QAAI,CAAAJ,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,KAAZ,MAAsB,cAA1B,EAA0C;AACxCL,MAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,KAAZ,GAAoBC,IAApB,CAAyB,MAAM;AAC7BP,QAAAA,UAAU,CACPQ,MADH,CACUP,MADV,EACkBF,OADlB,EAEGQ,IAFH,CAESE,GAAD,IAAS;AACbN,UAAAA,OAAO,CAACM,GAAD,CAAP;AACD,SAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdP,UAAAA,MAAM,CAACO,GAAD,CAAN;AACD,SAPH;AAQD,OATD;AAUD,KAXD,MAWO;AACLX,MAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CACNQ,MADJ,CACWP,MADX,EACmBF,OADnB,EAEGQ,IAFH,CAESE,GAAD,IAAS;AACbN,QAAAA,OAAO,CAACM,GAAD,CAAP;AACD,OAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACD,OAPH;AAQD;AACF,GAtBM,CAAP;AAuBD,CA1BD;;AA2BA,eAAed,gBAAf","sourcesContent":["/* eslint-disable handle-callback-err */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { HubConnection } from '@microsoft/signalr';\nexport interface webSocketsMethodType {\n  connection: HubConnection | undefined;\n  payload: any;\n  method: string;\n}\nconst webSocketsMethod = (props: webSocketsMethodType): Promise<number> => {\n  const { payload, connection, method } = props;\n\n  return new Promise<number>((resolve, reject) => {\n    if (connection?.state === 'Disconnected') {\n      connection?.start().then(() => {\n        connection\n          .invoke(method, payload)\n          .then((res) => {\n            resolve(res);\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      });\n    } else {\n      connection\n        ?.invoke(method, payload)\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    }\n  });\n};\nexport default webSocketsMethod;\n"]},"metadata":{},"sourceType":"module"}